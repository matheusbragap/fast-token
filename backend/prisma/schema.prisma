// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// database models
// ========================================

// ================Users permissions========================

// users table
model User {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(100)
  email    String  @db.VarChar(255)
  phone    String? @db.VarChar(20)
  password String
  // document  String?  @unique
  roles    Role[] // teria o master

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

// Tabela de Cargos (Roles) - Criados dinamicamente pelo ADMIN
model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  // Relacionamentos
  users       User[] // Usuários com este cargo
  permissions RolePermission[] // Permissões vinculadas

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tabela de Permissões - Lista fixa definida pelo sistema
model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique // Ex: "view_dashboard", "manage_products", "manage_roles"
  description String?
  category    String // Ex: "dashboard", "products", "cashier", "admin"
  roles       RolePermission[] // Relacionamento: Uma permissão pode estar em vários cargos
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([category])
}

// Tabela de junção: Cargos <-> Permissões
// Esta tabela conecta quais permissões cada cargo tem
model RolePermission {
  id           Int      @id @default(autoincrement())
  roleId       Int
  permissionId Int
  createdAt    DateTime @default(now())

  // Relacionamentos
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  // Garantir que não existam duplicatas
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// ========================================
